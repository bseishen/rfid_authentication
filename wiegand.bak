/*
wiegand.c
Copyright (c) 2012 Ben S. Eishen
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.
*/

#include "rfid.h"

int fd[2];

void init_wiegand()
{
	char buf[MAX_BUF];

	init_wiegand_gpio(D0_GPIO);
	init_wiegand_gpio(D1_GPIO);
	snprintf(buf, sizeof(buf), SYSFS_GPIO_DIR "/gpio%d/value", D0_GPIO);
	fd[0] = open(buf, O_RDONLY);
	snprintf(buf, sizeof(buf), SYSFS_GPIO_DIR "/gpio%d/value", D1_GPIO);
	fd[1] = open(buf, O_RDONLY);

}

void init_wiegand_gpio(int gpio)
{
	gpio_export(gpio);
	gpio_set_dir(gpio, 0);
	gpio_set_edge(gpio, "rising");
	gpio_fd = gpio_fd_open(gpio);
}


double readWiegand()
{
       struct pollfd pfd[2];

        pfd[0].fd = fd[A];
        pfd[0].events = POLLPRI;
        pfd[0].revents = 0;

        pfd[1].fd = fd[B];
        pfd[1].events = POLLPRI;
        pfd[1].revents = 0;

        int lead[2];
        while (1) {
                int ready = poll(pfd, 2, -1);
                printf("ready: %d\n", ready);

                if (pfd[A].revents != 0) {
                        printf("\t Lead A\n");
                        //dump_event(fd[A], &pfd[A]);
                        lead[A] = get_lead(fd[A]);
                }
                if (pfd[B].revents != 0) {
                        printf("\t Lead B\n");
                        //dump_event(fd[B], &pfd[B]);
                        lead[B] = get_lead(fd[B]);
                }

                printf("\t\t A: %d  B: %d\n", lead[A], lead[B]);
        }

}
